//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension API.Worlds {

    /**
    Update the world

    This will update this world
    */
    public enum UpdateWorld {

        public static let service = APIService<Response>(id: "updateWorld", tag: "Worlds", method: "PUT", path: "/world/{worldID}", hasBody: true)

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** String UUID of the world */
                public var worldID: String

                public init(worldID: String) {
                    self.worldID = worldID
                }
            }

            public var options: Options

            public var body: ClientSideWorld?

            public init(body: ClientSideWorld?, options: Options, encoder: RequestEncoder? = nil) {
                self.body = body
                self.options = options
                super.init(service: UpdateWorld.service) { defaultEncoder in
                    return try (encoder ?? defaultEncoder).encode(body)
                }
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(worldID: String, body: ClientSideWorld? = nil) {
                let options = Options(worldID: worldID)
                self.init(body: body, options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "worldID" + "}", with: "\(self.options.worldID)")
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = [World]

            /** The world has been created */
            case status200([World])

            public var success: [World]? {
                switch self {
                case .status200(let response): return response
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode([World].self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
